/* This file was generated by SableCC (http://www.sablecc.org/). */

package x_language.analysis;

import java.util.*;
import x_language.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStartProgram(AStartProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVarStart(ADecVarStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConsStart(ADecConsStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecProcedureStart(ADecProcedureStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFunctionStart(ADecFunctionStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACreateDecVar(ACreateDecVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarAssignDecVar(AVarAssignDecVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultDecVar(AMultDecVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiMultDecVar(AMultiMultDecVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarAssign(AVarAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignVarAssign(AAssignVarAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecCons(ADecCons node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConsAssign(AConsAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignConsAssign(AAssignConsAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayExtArray(AArrayExtArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayCompArray(AArrayCompArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayExt(AArrayExt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpsArrayExp(AExpsArrayExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayExp(AArrayExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdArrayComp(AIdArrayComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpArrayComp(AExpArrayComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualExp(AEqualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterExp(AGreaterExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASmallerExp(ASmallerExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerExp(AIntegerExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealNumberExp(ARealNumberExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanExp(ABooleanExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesisExp(AParenthesisExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallExp(AFunctionCallExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockExp(ABlockExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignInitialize(AAssignInitialize node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignIdInitialize(AAssignIdInitialize node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignArrayExtInitialize(AAssignArrayExtInitialize node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignArrayCompInitialize(AAssignArrayCompInitialize node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignWithId(AAssignWithId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseCommandCommand(AIfElseCommandCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileCommand(AWhileCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallCommand(AFunctionCallCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignValCommand(AAssignValCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignIdCommand(AAssignIdCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignArrayExtCommand(AAssignArrayExtCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignArrayCompCommand(AAssignArrayCompCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockCommand(ABlockCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyCommand(AEmptyCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConsBlockScope(ADecConsBlockScope node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVarBlockScope(ADecVarBlockScope node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockCommandBlockScope(ABlockCommandBlockScope node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseCommand(AIfElseCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyListArgs(AEmptyListArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgsListArgs(AArgsListArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListArgs(AListArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecProcedure(ADecProcedure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFunction(ADecFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterParameters(AParameterParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterListParameters(AParameterListParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyParameters(AEmptyParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProcedure(TProcedure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCons(TCons node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPipe(TPipe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftParen(TLeftParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightParen(TRightParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftCurly(TLeftCurly node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightCurly(TRightCurly node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftBrackets(TLeftBrackets node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBrackets(TRightBrackets node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSmaller(TSmaller node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSize(TSize node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRead(TRead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRealNumber(TRealNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEol(TEol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlockComment(TBlockComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
