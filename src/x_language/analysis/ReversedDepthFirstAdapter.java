/* This file was generated by SableCC (http://www.sablecc.org/). */

package x_language.analysis;

import java.util.*;
import x_language.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAStartProgram(AStartProgram node)
    {
        defaultIn(node);
    }

    public void outAStartProgram(AStartProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartProgram(AStartProgram node)
    {
        inAStartProgram(node);
        {
            List<PStart> copy = new ArrayList<PStart>(node.getStart());
            Collections.reverse(copy);
            for(PStart e : copy)
            {
                e.apply(this);
            }
        }
        outAStartProgram(node);
    }

    public void inADecVarStart(ADecVarStart node)
    {
        defaultIn(node);
    }

    public void outADecVarStart(ADecVarStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarStart(ADecVarStart node)
    {
        inADecVarStart(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarStart(node);
    }

    public void inADecConsStart(ADecConsStart node)
    {
        defaultIn(node);
    }

    public void outADecConsStart(ADecConsStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsStart(ADecConsStart node)
    {
        inADecConsStart(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsStart(node);
    }

    public void inADecProcedureStart(ADecProcedureStart node)
    {
        defaultIn(node);
    }

    public void outADecProcedureStart(ADecProcedureStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedureStart(ADecProcedureStart node)
    {
        inADecProcedureStart(node);
        if(node.getDecProcedure() != null)
        {
            node.getDecProcedure().apply(this);
        }
        outADecProcedureStart(node);
    }

    public void inADecFunctionStart(ADecFunctionStart node)
    {
        defaultIn(node);
    }

    public void outADecFunctionStart(ADecFunctionStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFunctionStart(ADecFunctionStart node)
    {
        inADecFunctionStart(node);
        if(node.getDecFunction() != null)
        {
            node.getDecFunction().apply(this);
        }
        outADecFunctionStart(node);
    }

    public void inACreateDecVar(ACreateDecVar node)
    {
        defaultIn(node);
    }

    public void outACreateDecVar(ACreateDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACreateDecVar(ACreateDecVar node)
    {
        inACreateDecVar(node);
        if(node.getMultDecVar() != null)
        {
            node.getMultDecVar().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outACreateDecVar(node);
    }

    public void inAVarAssignDecVar(AVarAssignDecVar node)
    {
        defaultIn(node);
    }

    public void outAVarAssignDecVar(AVarAssignDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarAssignDecVar(AVarAssignDecVar node)
    {
        inAVarAssignDecVar(node);
        if(node.getVarAssign() != null)
        {
            node.getVarAssign().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVarAssignDecVar(node);
    }

    public void inAMultDecVar(AMultDecVar node)
    {
        defaultIn(node);
    }

    public void outAMultDecVar(AMultDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultDecVar(AMultDecVar node)
    {
        inAMultDecVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMultDecVar(node);
    }

    public void inAMultiMultDecVar(AMultiMultDecVar node)
    {
        defaultIn(node);
    }

    public void outAMultiMultDecVar(AMultiMultDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiMultDecVar(AMultiMultDecVar node)
    {
        inAMultiMultDecVar(node);
        if(node.getMultDecVar() != null)
        {
            node.getMultDecVar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMultiMultDecVar(node);
    }

    public void inAVarAssign(AVarAssign node)
    {
        defaultIn(node);
    }

    public void outAVarAssign(AVarAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarAssign(AVarAssign node)
    {
        inAVarAssign(node);
        if(node.getInitialize() != null)
        {
            node.getInitialize().apply(this);
        }
        outAVarAssign(node);
    }

    public void inAAssignVarAssign(AAssignVarAssign node)
    {
        defaultIn(node);
    }

    public void outAAssignVarAssign(AAssignVarAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignVarAssign(AAssignVarAssign node)
    {
        inAAssignVarAssign(node);
        if(node.getVarAssign() != null)
        {
            node.getVarAssign().apply(this);
        }
        if(node.getInitialize() != null)
        {
            node.getInitialize().apply(this);
        }
        outAAssignVarAssign(node);
    }

    public void inADecCons(ADecCons node)
    {
        defaultIn(node);
    }

    public void outADecCons(ADecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecCons(ADecCons node)
    {
        inADecCons(node);
        if(node.getConsAssign() != null)
        {
            node.getConsAssign().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outADecCons(node);
    }

    public void inAConsAssign(AConsAssign node)
    {
        defaultIn(node);
    }

    public void outAConsAssign(AConsAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConsAssign(AConsAssign node)
    {
        inAConsAssign(node);
        if(node.getInitialize() != null)
        {
            node.getInitialize().apply(this);
        }
        outAConsAssign(node);
    }

    public void inAAssignConsAssign(AAssignConsAssign node)
    {
        defaultIn(node);
    }

    public void outAAssignConsAssign(AAssignConsAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignConsAssign(AAssignConsAssign node)
    {
        inAAssignConsAssign(node);
        if(node.getConsAssign() != null)
        {
            node.getConsAssign().apply(this);
        }
        if(node.getInitialize() != null)
        {
            node.getInitialize().apply(this);
        }
        outAAssignConsAssign(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        outAIntType(node);
    }

    public void inARealType(ARealType node)
    {
        defaultIn(node);
    }

    public void outARealType(ARealType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        inARealType(node);
        outARealType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        outABoolType(node);
    }

    public void inAArrayType(AArrayType node)
    {
        defaultIn(node);
    }

    public void outAArrayType(AArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        inAArrayType(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArrayType(node);
    }

    public void inAArrayExtArray(AArrayExtArray node)
    {
        defaultIn(node);
    }

    public void outAArrayExtArray(AArrayExtArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExtArray(AArrayExtArray node)
    {
        inAArrayExtArray(node);
        if(node.getArrayExt() != null)
        {
            node.getArrayExt().apply(this);
        }
        outAArrayExtArray(node);
    }

    public void inAArrayCompArray(AArrayCompArray node)
    {
        defaultIn(node);
    }

    public void outAArrayCompArray(AArrayCompArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayCompArray(AArrayCompArray node)
    {
        inAArrayCompArray(node);
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        outAArrayCompArray(node);
    }

    public void inAArrayExt(AArrayExt node)
    {
        defaultIn(node);
    }

    public void outAArrayExt(AArrayExt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExt(AArrayExt node)
    {
        inAArrayExt(node);
        if(node.getArrayExp() != null)
        {
            node.getArrayExp().apply(this);
        }
        outAArrayExt(node);
    }

    public void inAExpsArrayExp(AExpsArrayExp node)
    {
        defaultIn(node);
    }

    public void outAExpsArrayExp(AExpsArrayExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpsArrayExp(AExpsArrayExp node)
    {
        inAExpsArrayExp(node);
        if(node.getArrayExp() != null)
        {
            node.getArrayExp().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpsArrayExp(node);
    }

    public void inAArrayExp(AArrayExp node)
    {
        defaultIn(node);
    }

    public void outAArrayExp(AArrayExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExp(AArrayExp node)
    {
        inAArrayExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAArrayExp(node);
    }

    public void inAIdArrayComp(AIdArrayComp node)
    {
        defaultIn(node);
    }

    public void outAIdArrayComp(AIdArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdArrayComp(AIdArrayComp node)
    {
        inAIdArrayComp(node);
        if(node.getRightBrackets() != null)
        {
            node.getRightBrackets().apply(this);
        }
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLeftBrackets() != null)
        {
            node.getLeftBrackets().apply(this);
        }
        outAIdArrayComp(node);
    }

    public void inAExpArrayComp(AExpArrayComp node)
    {
        defaultIn(node);
    }

    public void outAExpArrayComp(AExpArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpArrayComp(AExpArrayComp node)
    {
        inAExpArrayComp(node);
        if(node.getRightBrackets() != null)
        {
            node.getRightBrackets().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLeftBrackets() != null)
        {
            node.getLeftBrackets().apply(this);
        }
        outAExpArrayComp(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANotExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExp(node);
    }

    public void inAEqualExp(AEqualExp node)
    {
        defaultIn(node);
    }

    public void outAEqualExp(AEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExp(AEqualExp node)
    {
        inAEqualExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqualExp(node);
    }

    public void inAGreaterExp(AGreaterExp node)
    {
        defaultIn(node);
    }

    public void outAGreaterExp(AGreaterExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterExp(AGreaterExp node)
    {
        inAGreaterExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreaterExp(node);
    }

    public void inASmallerExp(ASmallerExp node)
    {
        defaultIn(node);
    }

    public void outASmallerExp(ASmallerExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASmallerExp(ASmallerExp node)
    {
        inASmallerExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASmallerExp(node);
    }

    public void inAIntegerExp(AIntegerExp node)
    {
        defaultIn(node);
    }

    public void outAIntegerExp(AIntegerExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerExp(AIntegerExp node)
    {
        inAIntegerExp(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerExp(node);
    }

    public void inARealNumberExp(ARealNumberExp node)
    {
        defaultIn(node);
    }

    public void outARealNumberExp(ARealNumberExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealNumberExp(ARealNumberExp node)
    {
        inARealNumberExp(node);
        if(node.getRealNumber() != null)
        {
            node.getRealNumber().apply(this);
        }
        outARealNumberExp(node);
    }

    public void inABooleanExp(ABooleanExp node)
    {
        defaultIn(node);
    }

    public void outABooleanExp(ABooleanExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanExp(ABooleanExp node)
    {
        inABooleanExp(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanExp(node);
    }

    public void inAParenthesisExp(AParenthesisExp node)
    {
        defaultIn(node);
    }

    public void outAParenthesisExp(AParenthesisExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesisExp(AParenthesisExp node)
    {
        inAParenthesisExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAParenthesisExp(node);
    }

    public void inAFunctionCallExp(AFunctionCallExp node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallExp(AFunctionCallExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallExp(AFunctionCallExp node)
    {
        inAFunctionCallExp(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallExp(node);
    }

    public void inABlockExp(ABlockExp node)
    {
        defaultIn(node);
    }

    public void outABlockExp(ABlockExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockExp(ABlockExp node)
    {
        inABlockExp(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecCons> copy = new ArrayList<PDecCons>(node.getDecCons());
            Collections.reverse(copy);
            for(PDecCons e : copy)
            {
                e.apply(this);
            }
        }
        outABlockExp(node);
    }

    public void inAAssignInitialize(AAssignInitialize node)
    {
        defaultIn(node);
    }

    public void outAAssignInitialize(AAssignInitialize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignInitialize(AAssignInitialize node)
    {
        inAAssignInitialize(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignInitialize(node);
    }

    public void inAAssignIdInitialize(AAssignIdInitialize node)
    {
        defaultIn(node);
    }

    public void outAAssignIdInitialize(AAssignIdInitialize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignIdInitialize(AAssignIdInitialize node)
    {
        inAAssignIdInitialize(node);
        if(node.getAssignWithId() != null)
        {
            node.getAssignWithId().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignIdInitialize(node);
    }

    public void inAAssignArrayExtInitialize(AAssignArrayExtInitialize node)
    {
        defaultIn(node);
    }

    public void outAAssignArrayExtInitialize(AAssignArrayExtInitialize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignArrayExtInitialize(AAssignArrayExtInitialize node)
    {
        inAAssignArrayExtInitialize(node);
        if(node.getArrayExt() != null)
        {
            node.getArrayExt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignArrayExtInitialize(node);
    }

    public void inAAssignArrayCompInitialize(AAssignArrayCompInitialize node)
    {
        defaultIn(node);
    }

    public void outAAssignArrayCompInitialize(AAssignArrayCompInitialize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignArrayCompInitialize(AAssignArrayCompInitialize node)
    {
        inAAssignArrayCompInitialize(node);
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignArrayCompInitialize(node);
    }

    public void inAAssignWithId(AAssignWithId node)
    {
        defaultIn(node);
    }

    public void outAAssignWithId(AAssignWithId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignWithId(AAssignWithId node)
    {
        inAAssignWithId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignWithId(node);
    }

    public void inAIfElseCommandCommand(AIfElseCommandCommand node)
    {
        defaultIn(node);
    }

    public void outAIfElseCommandCommand(AIfElseCommandCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseCommandCommand(AIfElseCommandCommand node)
    {
        inAIfElseCommandCommand(node);
        if(node.getIfElseCommand() != null)
        {
            node.getIfElseCommand().apply(this);
        }
        outAIfElseCommandCommand(node);
    }

    public void inAWhileCommand(AWhileCommand node)
    {
        defaultIn(node);
    }

    public void outAWhileCommand(AWhileCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileCommand(AWhileCommand node)
    {
        inAWhileCommand(node);
        if(node.getCommand() != null)
        {
            node.getCommand().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAWhileCommand(node);
    }

    public void inAFunctionCallCommand(AFunctionCallCommand node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallCommand(AFunctionCallCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallCommand(AFunctionCallCommand node)
    {
        inAFunctionCallCommand(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallCommand(node);
    }

    public void inAAssignValCommand(AAssignValCommand node)
    {
        defaultIn(node);
    }

    public void outAAssignValCommand(AAssignValCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignValCommand(AAssignValCommand node)
    {
        inAAssignValCommand(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignValCommand(node);
    }

    public void inAAssignIdCommand(AAssignIdCommand node)
    {
        defaultIn(node);
    }

    public void outAAssignIdCommand(AAssignIdCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignIdCommand(AAssignIdCommand node)
    {
        inAAssignIdCommand(node);
        if(node.getAssignWithId() != null)
        {
            node.getAssignWithId().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignIdCommand(node);
    }

    public void inAAssignArrayExtCommand(AAssignArrayExtCommand node)
    {
        defaultIn(node);
    }

    public void outAAssignArrayExtCommand(AAssignArrayExtCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignArrayExtCommand(AAssignArrayExtCommand node)
    {
        inAAssignArrayExtCommand(node);
        if(node.getArrayExt() != null)
        {
            node.getArrayExt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignArrayExtCommand(node);
    }

    public void inAAssignArrayCompCommand(AAssignArrayCompCommand node)
    {
        defaultIn(node);
    }

    public void outAAssignArrayCompCommand(AAssignArrayCompCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignArrayCompCommand(AAssignArrayCompCommand node)
    {
        inAAssignArrayCompCommand(node);
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignArrayCompCommand(node);
    }

    public void inABlockCommand(ABlockCommand node)
    {
        defaultIn(node);
    }

    public void outABlockCommand(ABlockCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockCommand(ABlockCommand node)
    {
        inABlockCommand(node);
        if(node.getBlockScope() != null)
        {
            node.getBlockScope().apply(this);
        }
        outABlockCommand(node);
    }

    public void inAEmptyCommand(AEmptyCommand node)
    {
        defaultIn(node);
    }

    public void outAEmptyCommand(AEmptyCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyCommand(AEmptyCommand node)
    {
        inAEmptyCommand(node);
        outAEmptyCommand(node);
    }

    public void inADecConsBlockScope(ADecConsBlockScope node)
    {
        defaultIn(node);
    }

    public void outADecConsBlockScope(ADecConsBlockScope node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsBlockScope(ADecConsBlockScope node)
    {
        inADecConsBlockScope(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsBlockScope(node);
    }

    public void inADecVarBlockScope(ADecVarBlockScope node)
    {
        defaultIn(node);
    }

    public void outADecVarBlockScope(ADecVarBlockScope node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarBlockScope(ADecVarBlockScope node)
    {
        inADecVarBlockScope(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarBlockScope(node);
    }

    public void inABlockCommandBlockScope(ABlockCommandBlockScope node)
    {
        defaultIn(node);
    }

    public void outABlockCommandBlockScope(ABlockCommandBlockScope node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockCommandBlockScope(ABlockCommandBlockScope node)
    {
        inABlockCommandBlockScope(node);
        if(node.getCommand() != null)
        {
            node.getCommand().apply(this);
        }
        outABlockCommandBlockScope(node);
    }

    public void inAIfElseCommand(AIfElseCommand node)
    {
        defaultIn(node);
    }

    public void outAIfElseCommand(AIfElseCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseCommand(AIfElseCommand node)
    {
        inAIfElseCommand(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIfElseCommand(node);
    }

    public void inAEmptyListArgs(AEmptyListArgs node)
    {
        defaultIn(node);
    }

    public void outAEmptyListArgs(AEmptyListArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyListArgs(AEmptyListArgs node)
    {
        inAEmptyListArgs(node);
        outAEmptyListArgs(node);
    }

    public void inAArgsListArgs(AArgsListArgs node)
    {
        defaultIn(node);
    }

    public void outAArgsListArgs(AArgsListArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgsListArgs(AArgsListArgs node)
    {
        inAArgsListArgs(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getListArgs() != null)
        {
            node.getListArgs().apply(this);
        }
        outAArgsListArgs(node);
    }

    public void inAListArgs(AListArgs node)
    {
        defaultIn(node);
    }

    public void outAListArgs(AListArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListArgs(AListArgs node)
    {
        inAListArgs(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAListArgs(node);
    }

    public void inADecProcedure(ADecProcedure node)
    {
        defaultIn(node);
    }

    public void outADecProcedure(ADecProcedure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedure(ADecProcedure node)
    {
        inADecProcedure(node);
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommand());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADecProcedure(node);
    }

    public void inADecFunction(ADecFunction node)
    {
        defaultIn(node);
    }

    public void outADecFunction(ADecFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFunction(ADecFunction node)
    {
        inADecFunction(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADecFunction(node);
    }

    public void inAParameterParameters(AParameterParameters node)
    {
        defaultIn(node);
    }

    public void outAParameterParameters(AParameterParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterParameters(AParameterParameters node)
    {
        inAParameterParameters(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAParameterParameters(node);
    }

    public void inAParameterListParameters(AParameterListParameters node)
    {
        defaultIn(node);
    }

    public void outAParameterListParameters(AParameterListParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterListParameters(AParameterListParameters node)
    {
        inAParameterListParameters(node);
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAParameterListParameters(node);
    }

    public void inAEmptyParameters(AEmptyParameters node)
    {
        defaultIn(node);
    }

    public void outAEmptyParameters(AEmptyParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyParameters(AEmptyParameters node)
    {
        inAEmptyParameters(node);
        outAEmptyParameters(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getListArgs() != null)
        {
            node.getListArgs().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCall(node);
    }
}
