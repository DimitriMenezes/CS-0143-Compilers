/* This file was generated by SableCC (http://www.sablecc.org/). */

package x_language.analysis;

import x_language.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStartProgram(AStartProgram node);
    void caseADecVarStart(ADecVarStart node);
    void caseADecConsStart(ADecConsStart node);
    void caseADecProcedureStart(ADecProcedureStart node);
    void caseADecFunctionStart(ADecFunctionStart node);
    void caseACreateDecVar(ACreateDecVar node);
    void caseAVarAssignDecVar(AVarAssignDecVar node);
    void caseAMultDecVar(AMultDecVar node);
    void caseAMultiMultDecVar(AMultiMultDecVar node);
    void caseAVarAssign(AVarAssign node);
    void caseAAssignVarAssign(AAssignVarAssign node);
    void caseADecCons(ADecCons node);
    void caseAConsAssign(AConsAssign node);
    void caseAAssignConsAssign(AAssignConsAssign node);
    void caseAIntType(AIntType node);
    void caseARealType(ARealType node);
    void caseABoolType(ABoolType node);
    void caseAArrayType(AArrayType node);
    void caseAArrayExtArray(AArrayExtArray node);
    void caseAArrayCompArray(AArrayCompArray node);
    void caseAArrayExt(AArrayExt node);
    void caseAExpsArrayExp(AExpsArrayExp node);
    void caseAArrayExp(AArrayExp node);
    void caseAIdArrayComp(AIdArrayComp node);
    void caseAExpArrayComp(AExpArrayComp node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseADivExp(ADivExp node);
    void caseAMultExp(AMultExp node);
    void caseAModExp(AModExp node);
    void caseANotExp(ANotExp node);
    void caseAAndExp(AAndExp node);
    void caseAOrExp(AOrExp node);
    void caseAEqualExp(AEqualExp node);
    void caseAGreaterExp(AGreaterExp node);
    void caseASmallerExp(ASmallerExp node);
    void caseAIntegerExp(AIntegerExp node);
    void caseARealNumberExp(ARealNumberExp node);
    void caseABooleanExp(ABooleanExp node);
    void caseAParenthesisExp(AParenthesisExp node);
    void caseAFunctionCallExp(AFunctionCallExp node);
    void caseABlockExp(ABlockExp node);
    void caseAAssignInitialize(AAssignInitialize node);
    void caseAAssignIdInitialize(AAssignIdInitialize node);
    void caseAAssignArrayExtInitialize(AAssignArrayExtInitialize node);
    void caseAAssignArrayCompInitialize(AAssignArrayCompInitialize node);
    void caseAAssignWithId(AAssignWithId node);
    void caseAIfElseCommandCommand(AIfElseCommandCommand node);
    void caseAWhileCommand(AWhileCommand node);
    void caseAFunctionCallCommand(AFunctionCallCommand node);
    void caseAAssignValCommand(AAssignValCommand node);
    void caseAAssignIdCommand(AAssignIdCommand node);
    void caseAAssignArrayExtCommand(AAssignArrayExtCommand node);
    void caseAAssignArrayCompCommand(AAssignArrayCompCommand node);
    void caseABlockCommand(ABlockCommand node);
    void caseAEmptyCommand(AEmptyCommand node);
    void caseADecConsBlockScope(ADecConsBlockScope node);
    void caseADecVarBlockScope(ADecVarBlockScope node);
    void caseABlockCommandBlockScope(ABlockCommandBlockScope node);
    void caseAIfElseCommand(AIfElseCommand node);
    void caseAEmptyListArgs(AEmptyListArgs node);
    void caseAArgsListArgs(AArgsListArgs node);
    void caseAListArgs(AListArgs node);
    void caseADecProcedure(ADecProcedure node);
    void caseADecFunction(ADecFunction node);
    void caseAParameterParameters(AParameterParameters node);
    void caseAParameterListParameters(AParameterListParameters node);
    void caseAEmptyParameters(AEmptyParameters node);
    void caseAFunctionCall(AFunctionCall node);

    void caseTReal(TReal node);
    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTProcedure(TProcedure node);
    void caseTFunction(TFunction node);
    void caseTCons(TCons node);
    void caseTVar(TVar node);
    void caseTPipe(TPipe node);
    void caseTLeftParen(TLeftParen node);
    void caseTRightParen(TRightParen node);
    void caseTLeftCurly(TLeftCurly node);
    void caseTRightCurly(TRightCurly node);
    void caseTLeftBrackets(TLeftBrackets node);
    void caseTRightBrackets(TRightBrackets node);
    void caseTBlank(TBlank node);
    void caseTAssign(TAssign node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTDiv(TDiv node);
    void caseTMult(TMult node);
    void caseTMod(TMod node);
    void caseTGreater(TGreater node);
    void caseTSmaller(TSmaller node);
    void caseTEqual(TEqual node);
    void caseTSize(TSize node);
    void caseTPrint(TPrint node);
    void caseTRead(TRead node);
    void caseTInteger(TInteger node);
    void caseTRealNumber(TRealNumber node);
    void caseTBoolean(TBoolean node);
    void caseTId(TId node);
    void caseTEol(TEol node);
    void caseTLineComment(TLineComment node);
    void caseTBlockComment(TBlockComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
