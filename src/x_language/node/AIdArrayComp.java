/* This file was generated by SableCC (http://www.sablecc.org/). */

package x_language.node;

import x_language.analysis.*;

@SuppressWarnings("nls")
public final class AIdArrayComp extends PArrayComp
{
    private TLeftBrackets _leftBrackets_;
    private TId _id_;
    private TPipe _pipe_;
    private PArrayComp _arrayComp_;
    private TRightBrackets _rightBrackets_;

    public AIdArrayComp()
    {
        // Constructor
    }

    public AIdArrayComp(
        @SuppressWarnings("hiding") TLeftBrackets _leftBrackets_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TPipe _pipe_,
        @SuppressWarnings("hiding") PArrayComp _arrayComp_,
        @SuppressWarnings("hiding") TRightBrackets _rightBrackets_)
    {
        // Constructor
        setLeftBrackets(_leftBrackets_);

        setId(_id_);

        setPipe(_pipe_);

        setArrayComp(_arrayComp_);

        setRightBrackets(_rightBrackets_);

    }

    @Override
    public Object clone()
    {
        return new AIdArrayComp(
            cloneNode(this._leftBrackets_),
            cloneNode(this._id_),
            cloneNode(this._pipe_),
            cloneNode(this._arrayComp_),
            cloneNode(this._rightBrackets_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdArrayComp(this);
    }

    public TLeftBrackets getLeftBrackets()
    {
        return this._leftBrackets_;
    }

    public void setLeftBrackets(TLeftBrackets node)
    {
        if(this._leftBrackets_ != null)
        {
            this._leftBrackets_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftBrackets_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TPipe getPipe()
    {
        return this._pipe_;
    }

    public void setPipe(TPipe node)
    {
        if(this._pipe_ != null)
        {
            this._pipe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pipe_ = node;
    }

    public PArrayComp getArrayComp()
    {
        return this._arrayComp_;
    }

    public void setArrayComp(PArrayComp node)
    {
        if(this._arrayComp_ != null)
        {
            this._arrayComp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrayComp_ = node;
    }

    public TRightBrackets getRightBrackets()
    {
        return this._rightBrackets_;
    }

    public void setRightBrackets(TRightBrackets node)
    {
        if(this._rightBrackets_ != null)
        {
            this._rightBrackets_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightBrackets_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leftBrackets_)
            + toString(this._id_)
            + toString(this._pipe_)
            + toString(this._arrayComp_)
            + toString(this._rightBrackets_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leftBrackets_ == child)
        {
            this._leftBrackets_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._pipe_ == child)
        {
            this._pipe_ = null;
            return;
        }

        if(this._arrayComp_ == child)
        {
            this._arrayComp_ = null;
            return;
        }

        if(this._rightBrackets_ == child)
        {
            this._rightBrackets_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leftBrackets_ == oldChild)
        {
            setLeftBrackets((TLeftBrackets) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._pipe_ == oldChild)
        {
            setPipe((TPipe) newChild);
            return;
        }

        if(this._arrayComp_ == oldChild)
        {
            setArrayComp((PArrayComp) newChild);
            return;
        }

        if(this._rightBrackets_ == oldChild)
        {
            setRightBrackets((TRightBrackets) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
