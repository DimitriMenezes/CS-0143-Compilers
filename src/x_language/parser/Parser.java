/* This file was generated by SableCC (http://www.sablecc.org/). */

package x_language.parser;

import x_language.lexer.*;
import x_language.node.*;
import x_language.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AStartProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ADecVarStart */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce ADecConsStart */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce ADecProcedureStart */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce ADecFunctionStart */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce ACreateDecVar */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAssignDecVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AMultDecVar */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AMultiMultDecVar */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AVarAssign */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AAssignVarAssign */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AAssignDecCons */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AConsAssign */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce AAssignConsAssign */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce AIntType */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce ARealType */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce ABoolType */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce AArrayType */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AArrayExtArray */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list);
            }
            break;
            case 19: /* reduce AArrayCompArray */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce AArrayExt */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list);
            }
            break;
            case 21: /* reduce AExpsArrayExp */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list);
            }
            break;
            case 22: /* reduce AArrayExp */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list);
            }
            break;
            case 23: /* reduce AIdArrayComp */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list);
            }
            break;
            case 24: /* reduce AExpArrayComp */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list);
            }
            break;
            case 25: /* reduce AFactorExp */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list);
            }
            break;
            case 26: /* reduce APlusExp */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list);
            }
            break;
            case 27: /* reduce AMinusExp */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list);
            }
            break;
            case 28: /* reduce ANotExpExp */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list);
            }
            break;
            case 29: /* reduce AEqualExp */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list);
            }
            break;
            case 30: /* reduce AGreaterExp */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce ASmallerExp */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AFunctionCallExp */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce ABlockExpExp */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list);
            }
            break;
            case 35: /* reduce AMultFactor */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AModFactor */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AAndFactor */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list);
            }
            break;
            case 39: /* reduce AOrFactor */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list);
            }
            break;
            case 40: /* reduce AIntegerTerm */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce ARealNumberTerm */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list);
            }
            break;
            case 42: /* reduce ABooleanTerm */
            {
                ArrayList<Object> list = new42();
                push(goTo(14), list);
            }
            break;
            case 43: /* reduce AParenthesisExpTerm */
            {
                ArrayList<Object> list = new43();
                push(goTo(14), list);
            }
            break;
            case 44: /* reduce AAblockexp1BlockExp */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list);
            }
            break;
            case 45: /* reduce AAblockexp2BlockExp */
            {
                ArrayList<Object> list = new45();
                push(goTo(15), list);
            }
            break;
            case 46: /* reduce AAblockexp3BlockExp */
            {
                ArrayList<Object> list = new46();
                push(goTo(15), list);
            }
            break;
            case 47: /* reduce AAblockexp4BlockExp */
            {
                ArrayList<Object> list = new47();
                push(goTo(15), list);
            }
            break;
            case 48: /* reduce AParenthesisExp */
            {
                ArrayList<Object> list = new48();
                push(goTo(16), list);
            }
            break;
            case 49: /* reduce AAssignValInitialize */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list);
            }
            break;
            case 50: /* reduce AAssignIdInitialize */
            {
                ArrayList<Object> list = new50();
                push(goTo(17), list);
            }
            break;
            case 51: /* reduce AAssignArrayExtInitialize */
            {
                ArrayList<Object> list = new51();
                push(goTo(17), list);
            }
            break;
            case 52: /* reduce AAssignArrayCompInitialize */
            {
                ArrayList<Object> list = new52();
                push(goTo(17), list);
            }
            break;
            case 53: /* reduce AAssignVal */
            {
                ArrayList<Object> list = new53();
                push(goTo(18), list);
            }
            break;
            case 54: /* reduce AAssignId */
            {
                ArrayList<Object> list = new54();
                push(goTo(19), list);
            }
            break;
            case 55: /* reduce AAssignWithId */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list);
            }
            break;
            case 56: /* reduce AAssignArrayExt */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list);
            }
            break;
            case 57: /* reduce AAssignArrayComp */
            {
                ArrayList<Object> list = new57();
                push(goTo(22), list);
            }
            break;
            case 58: /* reduce AAssignValAssignOperations */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list);
            }
            break;
            case 59: /* reduce AAssignIdAssignOperations */
            {
                ArrayList<Object> list = new59();
                push(goTo(23), list);
            }
            break;
            case 60: /* reduce AAssignArrayExtAssignOperations */
            {
                ArrayList<Object> list = new60();
                push(goTo(23), list);
            }
            break;
            case 61: /* reduce AAssignArrayCompAssignOperations */
            {
                ArrayList<Object> list = new61();
                push(goTo(23), list);
            }
            break;
            case 62: /* reduce ADecProcedure */
            {
                ArrayList<Object> list = new62();
                push(goTo(24), list);
            }
            break;
            case 63: /* reduce AAdecfunction1DecFunction */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list);
            }
            break;
            case 64: /* reduce AAdecfunction2DecFunction */
            {
                ArrayList<Object> list = new64();
                push(goTo(25), list);
            }
            break;
            case 65: /* reduce AParameterParameters */
            {
                ArrayList<Object> list = new65();
                push(goTo(26), list);
            }
            break;
            case 66: /* reduce AParameterListParameters */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list);
            }
            break;
            case 67: /* reduce AEmptyParameters */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list);
            }
            break;
            case 68: /* reduce AAssignOperationsCommand */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list);
            }
            break;
            case 69: /* reduce AIfElseCommandCommand */
            {
                ArrayList<Object> list = new69();
                push(goTo(27), list);
            }
            break;
            case 70: /* reduce AWhileCommandCommand */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list);
            }
            break;
            case 71: /* reduce AFunctionCallCommand */
            {
                ArrayList<Object> list = new71();
                push(goTo(27), list);
            }
            break;
            case 72: /* reduce ABlockCommand */
            {
                ArrayList<Object> list = new72();
                push(goTo(27), list);
            }
            break;
            case 73: /* reduce AEmptyCommand */
            {
                ArrayList<Object> list = new73();
                push(goTo(27), list);
            }
            break;
            case 74: /* reduce ADecConsBlockScope */
            {
                ArrayList<Object> list = new74();
                push(goTo(28), list);
            }
            break;
            case 75: /* reduce ADecVarBlockScope */
            {
                ArrayList<Object> list = new75();
                push(goTo(28), list);
            }
            break;
            case 76: /* reduce ABlockCommandBlockScope */
            {
                ArrayList<Object> list = new76();
                push(goTo(28), list);
            }
            break;
            case 77: /* reduce AIfElseCommand */
            {
                ArrayList<Object> list = new77();
                push(goTo(29), list);
            }
            break;
            case 78: /* reduce AWhileCommand */
            {
                ArrayList<Object> list = new78();
                push(goTo(30), list);
            }
            break;
            case 79: /* reduce AFunctionCallFunctionCall */
            {
                ArrayList<Object> list = new79();
                push(goTo(31), list);
            }
            break;
            case 80: /* reduce AEmptyListArgs */
            {
                ArrayList<Object> list = new80();
                push(goTo(32), list);
            }
            break;
            case 81: /* reduce AArgsListArgs */
            {
                ArrayList<Object> list = new81();
                push(goTo(32), list);
            }
            break;
            case 82: /* reduce AListArgs */
            {
                ArrayList<Object> list = new82();
                push(goTo(32), list);
            }
            break;
            case 83: /* reduce ATerminal$Start */
            {
                ArrayList<Object> list = new83();
                push(goTo(33), list);
            }
            break;
            case 84: /* reduce ANonTerminal$Start */
            {
                ArrayList<Object> list = new84();
                push(goTo(33), list);
            }
            break;
            case 85: /* reduce ATerminal$DecCons */
            {
                ArrayList<Object> list = new85();
                push(goTo(34), list);
            }
            break;
            case 86: /* reduce ANonTerminal$DecCons */
            {
                ArrayList<Object> list = new86();
                push(goTo(34), list);
            }
            break;
            case 87: /* reduce ATerminal$Exp */
            {
                ArrayList<Object> list = new87();
                push(goTo(35), list);
            }
            break;
            case 88: /* reduce ANonTerminal$Exp */
            {
                ArrayList<Object> list = new88();
                push(goTo(35), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AStartProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AStartProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ADecVarStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PDecVar pdecvarNode2;
        pdecvarNode2 = (PDecVar)nodeArrayList1.get(0);

        pstartNode1 = new ADecVarStart(pdecvarNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADecConsStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PDecCons pdecconsNode2;
        pdecconsNode2 = (PDecCons)nodeArrayList1.get(0);

        pstartNode1 = new ADecConsStart(pdecconsNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADecProcedureStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PDecProcedure pdecprocedureNode2;
        pdecprocedureNode2 = (PDecProcedure)nodeArrayList1.get(0);

        pstartNode1 = new ADecProcedureStart(pdecprocedureNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADecFunctionStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PDecFunction pdecfunctionNode2;
        pdecfunctionNode2 = (PDecFunction)nodeArrayList1.get(0);

        pstartNode1 = new ADecFunctionStart(pdecfunctionNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ACreateDecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVar pdecvarNode1;
        {
            // Block
        PType ptypeNode2;
        PMultDecVar pmultdecvarNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        pmultdecvarNode3 = (PMultDecVar)nodeArrayList3.get(0);

        pdecvarNode1 = new ACreateDecVar(ptypeNode2, pmultdecvarNode3);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAssignDecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVar pdecvarNode1;
        {
            // Block
        PType ptypeNode2;
        PVarAssign pvarassignNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        pvarassignNode3 = (PVarAssign)nodeArrayList3.get(0);

        pdecvarNode1 = new AVarAssignDecVar(ptypeNode2, pvarassignNode3);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AMultDecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDecVar pmultdecvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pmultdecvarNode1 = new AMultDecVar(tidNode2);
        }
	nodeList.add(pmultdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMultiMultDecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDecVar pmultdecvarNode1;
        {
            // Block
        TId tidNode2;
        PMultDecVar pmultdecvarNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pmultdecvarNode3 = (PMultDecVar)nodeArrayList3.get(0);

        pmultdecvarNode1 = new AMultiMultDecVar(tidNode2, pmultdecvarNode3);
        }
	nodeList.add(pmultdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVarAssign */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarAssign pvarassignNode1;
        {
            // Block
        PInitialize pinitializeNode2;
        pinitializeNode2 = (PInitialize)nodeArrayList1.get(0);

        pvarassignNode1 = new AVarAssign(pinitializeNode2);
        }
	nodeList.add(pvarassignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAssignVarAssign */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarAssign pvarassignNode1;
        {
            // Block
        PInitialize pinitializeNode2;
        PVarAssign pvarassignNode3;
        pinitializeNode2 = (PInitialize)nodeArrayList1.get(0);
        pvarassignNode3 = (PVarAssign)nodeArrayList3.get(0);

        pvarassignNode1 = new AAssignVarAssign(pinitializeNode2, pvarassignNode3);
        }
	nodeList.add(pvarassignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAssignDecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecCons pdecconsNode1;
        {
            // Block
        PType ptypeNode2;
        PConsAssign pconsassignNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        pconsassignNode3 = (PConsAssign)nodeArrayList3.get(0);

        pdecconsNode1 = new ADecCons(ptypeNode2, pconsassignNode3);
        }
	nodeList.add(pdecconsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AConsAssign */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConsAssign pconsassignNode1;
        {
            // Block
        PInitialize pinitializeNode2;
        pinitializeNode2 = (PInitialize)nodeArrayList1.get(0);

        pconsassignNode1 = new AConsAssign(pinitializeNode2);
        }
	nodeList.add(pconsassignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAssignConsAssign */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConsAssign pconsassignNode1;
        {
            // Block
        PInitialize pinitializeNode2;
        PConsAssign pconsassignNode3;
        pinitializeNode2 = (PInitialize)nodeArrayList1.get(0);
        pconsassignNode3 = (PConsAssign)nodeArrayList3.get(0);

        pconsassignNode1 = new AAssignConsAssign(pinitializeNode2, pconsassignNode3);
        }
	nodeList.add(pconsassignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ARealType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ARealType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ABoolType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AArrayType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        PExp pexpNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        ptypeNode1 = new AArrayType(ptypeNode2, pexpNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AArrayExtArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        PArrayExt parrayextNode2;
        parrayextNode2 = (PArrayExt)nodeArrayList1.get(0);

        parrayNode1 = new AArrayExtArray(parrayextNode2);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AArrayCompArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        PArrayComp parraycompNode2;
        parraycompNode2 = (PArrayComp)nodeArrayList1.get(0);

        parrayNode1 = new AArrayCompArray(parraycompNode2);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AArrayExt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayExt parrayextNode1;
        {
            // Block
        PArrayExp parrayexpNode2;
        parrayexpNode2 = (PArrayExp)nodeArrayList2.get(0);

        parrayextNode1 = new AArrayExt(parrayexpNode2);
        }
	nodeList.add(parrayextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AExpsArrayExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayExp parrayexpNode1;
        {
            // Block
        PExp pexpNode2;
        TComma tcommaNode3;
        PArrayExp parrayexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        parrayexpNode4 = (PArrayExp)nodeArrayList3.get(0);

        parrayexpNode1 = new AExpsArrayExp(pexpNode2, tcommaNode3, parrayexpNode4);
        }
	nodeList.add(parrayexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AArrayExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayExp parrayexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        parrayexpNode1 = new AArrayExp(pexpNode2);
        }
	nodeList.add(parrayexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AIdArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayComp parraycompNode1;
        {
            // Block
        TLeftBrackets tleftbracketsNode2;
        TId tidNode3;
        TPipe tpipeNode4;
        PArrayComp parraycompNode5;
        TRightBrackets trightbracketsNode6;
        tleftbracketsNode2 = (TLeftBrackets)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tpipeNode4 = (TPipe)nodeArrayList3.get(0);
        parraycompNode5 = (PArrayComp)nodeArrayList4.get(0);
        trightbracketsNode6 = (TRightBrackets)nodeArrayList5.get(0);

        parraycompNode1 = new AIdArrayComp(tleftbracketsNode2, tidNode3, tpipeNode4, parraycompNode5, trightbracketsNode6);
        }
	nodeList.add(parraycompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AExpArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayComp parraycompNode1;
        {
            // Block
        TLeftBrackets tleftbracketsNode2;
        TId tidNode3;
        TPipe tpipeNode4;
        PExp pexpNode5;
        TRightBrackets trightbracketsNode6;
        tleftbracketsNode2 = (TLeftBrackets)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tpipeNode4 = (TPipe)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        trightbracketsNode6 = (TRightBrackets)nodeArrayList5.get(0);

        parraycompNode1 = new AExpArrayComp(tleftbracketsNode2, tidNode3, tpipeNode4, pexpNode5, trightbracketsNode6);
        }
	nodeList.add(parraycompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFactorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce APlusExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AMinusExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANotExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AEqualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AGreaterExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASmallerExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASmallerExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AFunctionCallExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpNode1 = new AFunctionCallExp(pfunctioncallNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ABlockExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAndFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AOrFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIntegerTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pexpNode1 = new AIntegerExp(tintegerNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ARealNumberTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TRealNumber trealnumberNode2;
        trealnumberNode2 = (TRealNumber)nodeArrayList1.get(0);

        pexpNode1 = new ARealNumberExp(trealnumberNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ABooleanTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        pexpNode1 = new ABooleanExp(tbooleanNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AParenthesisExpTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAblockexp1BlockExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pexpNode1 = new ABlockExp(listNode2, listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAblockexp2BlockExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pexpNode1 = new ABlockExp(listNode3, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAblockexp3BlockExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new ABlockExp(listNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAblockexp4BlockExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpNode1 = new ABlockExp(listNode3, listNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AParenthesisExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AParenthesisExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAssignValInitialize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitialize pinitializeNode1;
        pinitializeNode1 = (PInitialize)nodeArrayList1.get(0);
	nodeList.add(pinitializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAssignIdInitialize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitialize pinitializeNode1;
        pinitializeNode1 = (PInitialize)nodeArrayList1.get(0);
	nodeList.add(pinitializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAssignArrayExtInitialize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitialize pinitializeNode1;
        pinitializeNode1 = (PInitialize)nodeArrayList1.get(0);
	nodeList.add(pinitializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAssignArrayCompInitialize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitialize pinitializeNode1;
        pinitializeNode1 = (PInitialize)nodeArrayList1.get(0);
	nodeList.add(pinitializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAssignVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitialize pinitializeNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pinitializeNode1 = new AAssignInitialize(tidNode2, pexpNode3);
        }
	nodeList.add(pinitializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAssignId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitialize pinitializeNode1;
        {
            // Block
        TId tidNode2;
        PAssignWithId passignwithidNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        passignwithidNode3 = (PAssignWithId)nodeArrayList3.get(0);

        pinitializeNode1 = new AAssignIdInitialize(tidNode2, passignwithidNode3);
        }
	nodeList.add(pinitializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAssignWithId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignWithId passignwithidNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        passignwithidNode1 = new AAssignWithId(tidNode2);
        }
	nodeList.add(passignwithidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAssignArrayExt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitialize pinitializeNode1;
        {
            // Block
        TId tidNode2;
        PArrayExt parrayextNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayextNode3 = (PArrayExt)nodeArrayList3.get(0);

        pinitializeNode1 = new AAssignArrayExtInitialize(tidNode2, parrayextNode3);
        }
	nodeList.add(pinitializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAssignArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitialize pinitializeNode1;
        {
            // Block
        TId tidNode2;
        PArrayComp parraycompNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parraycompNode3 = (PArrayComp)nodeArrayList3.get(0);

        pinitializeNode1 = new AAssignArrayCompInitialize(tidNode2, parraycompNode3);
        }
	nodeList.add(pinitializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAssignValAssignOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcommandNode1 = new AAssignValCommand(tidNode2, pexpNode3);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAssignIdAssignOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TId tidNode2;
        PAssignWithId passignwithidNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        passignwithidNode3 = (PAssignWithId)nodeArrayList3.get(0);

        pcommandNode1 = new AAssignIdCommand(tidNode2, passignwithidNode3);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAssignArrayExtAssignOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TId tidNode2;
        PArrayExt parrayextNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parrayextNode3 = (PArrayExt)nodeArrayList3.get(0);

        pcommandNode1 = new AAssignArrayExtCommand(tidNode2, parrayextNode3);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAssignArrayCompAssignOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TId tidNode2;
        PArrayComp parraycompNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        parraycompNode3 = (PArrayComp)nodeArrayList3.get(0);

        pcommandNode1 = new AAssignArrayCompCommand(tidNode2, parraycompNode3);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ADecProcedure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProcedure pdecprocedureNode1;
        {
            // Block
        TId tidNode2;
        PParameters pparametersNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        pparametersNode3 = (PParameters)nodeArrayList4.get(0);
        {
            // Block
        PCommand pcommandNode4;
        pcommandNode4 = (PCommand)nodeArrayList6.get(0);
	if(pcommandNode4 != null)
	{
	  listNode5.add(pcommandNode4);
	}
        }

        pdecprocedureNode1 = new ADecProcedure(tidNode2, pparametersNode3, listNode5);
        }
	nodeList.add(pdecprocedureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAdecfunction1DecFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFunction pdecfunctionNode1;
        {
            // Block
        TId tidNode2;
        PParameters pparametersNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList3.get(0);
        pparametersNode3 = (PParameters)nodeArrayList5.get(0);
        {
            // Block
        }

        pdecfunctionNode1 = new ADecFunction(tidNode2, pparametersNode3, listNode4);
        }
	nodeList.add(pdecfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAdecfunction2DecFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFunction pdecfunctionNode1;
        {
            // Block
        TId tidNode2;
        PParameters pparametersNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList3.get(0);
        pparametersNode3 = (PParameters)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList7.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pdecfunctionNode1 = new ADecFunction(tidNode2, pparametersNode3, listNode5);
        }
	nodeList.add(pdecfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AParameterParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        pparametersNode1 = new AParameterParameters(ptypeNode2, tidNode3);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AParameterListParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        PParameters pparametersNode4;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        pparametersNode4 = (PParameters)nodeArrayList5.get(0);

        pparametersNode1 = new AParameterListParameters(ptypeNode2, tidNode3, pparametersNode4);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AEmptyParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParameters pparametersNode1;
        {
            // Block

        pparametersNode1 = new AEmptyParameters();
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAssignOperationsCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        pcommandNode1 = (PCommand)nodeArrayList1.get(0);
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AIfElseCommandCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        PIfElseCommand pifelsecommandNode2;
        pifelsecommandNode2 = (PIfElseCommand)nodeArrayList1.get(0);

        pcommandNode1 = new AIfElseCommandCommand(pifelsecommandNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AWhileCommandCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        pcommandNode1 = (PCommand)nodeArrayList1.get(0);
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AFunctionCallCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pcommandNode1 = new AFunctionCallCommand(pfunctioncallNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ABlockCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        PBlockScope pblockscopeNode2;
        pblockscopeNode2 = (PBlockScope)nodeArrayList2.get(0);

        pcommandNode1 = new ABlockCommand(pblockscopeNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AEmptyCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PCommand pcommandNode1;
        {
            // Block

        pcommandNode1 = new AEmptyCommand();
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ADecConsBlockScope */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlockScope pblockscopeNode1;
        {
            // Block
        PDecCons pdecconsNode2;
        pdecconsNode2 = (PDecCons)nodeArrayList1.get(0);

        pblockscopeNode1 = new ADecConsBlockScope(pdecconsNode2);
        }
	nodeList.add(pblockscopeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ADecVarBlockScope */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlockScope pblockscopeNode1;
        {
            // Block
        PDecVar pdecvarNode2;
        pdecvarNode2 = (PDecVar)nodeArrayList1.get(0);

        pblockscopeNode1 = new ADecVarBlockScope(pdecvarNode2);
        }
	nodeList.add(pblockscopeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ABlockCommandBlockScope */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlockScope pblockscopeNode1;
        {
            // Block
        PCommand pcommandNode2;
        pcommandNode2 = (PCommand)nodeArrayList1.get(0);

        pblockscopeNode1 = new ABlockCommandBlockScope(pcommandNode2);
        }
	nodeList.add(pblockscopeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AIfElseCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElseCommand pifelsecommandNode1;
        {
            // Block
        PExp pexpNode2;
        PCommand pcommandNode3;
        PCommand pcommandNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcommandNode3 = (PCommand)nodeArrayList5.get(0);
        pcommandNode4 = (PCommand)nodeArrayList7.get(0);

        pifelsecommandNode1 = new AIfElseCommand(pexpNode2, pcommandNode3, pcommandNode4);
        }
	nodeList.add(pifelsecommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AWhileCommand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        PExp pexpNode2;
        PCommand pcommandNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcommandNode3 = (PCommand)nodeArrayList5.get(0);

        pcommandNode1 = new AWhileCommand(pexpNode2, pcommandNode3);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AFunctionCallFunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TId tidNode2;
        PListArgs plistargsNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        plistargsNode3 = (PListArgs)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidNode2, plistargsNode3);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AEmptyListArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListArgs plistargsNode1;
        {
            // Block

        plistargsNode1 = new AEmptyListArgs();
        }
	nodeList.add(plistargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AArgsListArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListArgs plistargsNode1;
        {
            // Block
        PListArgs plistargsNode2;
        PExp pexpNode3;
        plistargsNode2 = (PListArgs)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        plistargsNode1 = new AArgsListArgs(plistargsNode2, pexpNode3);
        }
	nodeList.add(plistargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AListArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListArgs plistargsNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        plistargsNode1 = new AListArgs(pexpNode2);
        }
	nodeList.add(plistargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStart pstartNode1;
        pstartNode1 = (PStart)nodeArrayList1.get(0);
	if(pstartNode1 != null)
	{
	  listNode2.add(pstartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStart pstartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstartNode2 = (PStart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstartNode2 != null)
	{
	  listNode3.add(pstartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$DecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecCons pdecconsNode1;
        pdecconsNode1 = (PDecCons)nodeArrayList1.get(0);
	if(pdecconsNode1 != null)
	{
	  listNode2.add(pdecconsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$DecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecCons pdecconsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdecconsNode2 = (PDecCons)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdecconsNode2 != null)
	{
	  listNode3.add(pdecconsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATerminal$Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANonTerminal$Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {7, SHIFT, 1}, {8, SHIFT, 2}, {9, SHIFT, 3}, {10, SHIFT, 4}, },
			{{-1, ERROR, 1}, {38, SHIFT, 12}, },
			{{-1, ERROR, 2}, {0, SHIFT, 13}, {1, SHIFT, 14}, {2, SHIFT, 15}, },
			{{-1, ERROR, 3}, {0, SHIFT, 13}, {1, SHIFT, 14}, {2, SHIFT, 15}, },
			{{-1, ERROR, 4}, {0, SHIFT, 13}, {1, SHIFT, 14}, {2, SHIFT, 15}, },
			{{-1, ERROR, 5}, {39, ACCEPT, -1}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 0}, {7, SHIFT, 1}, {8, SHIFT, 2}, {9, SHIFT, 3}, {10, SHIFT, 4}, },
			{{-1, ERROR, 12}, {12, SHIFT, 20}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 16}, {16, SHIFT, 21}, {38, SHIFT, 22}, },
			{{-1, ERROR, 17}, {16, SHIFT, 21}, {38, SHIFT, 23}, },
			{{-1, ERROR, 18}, {16, SHIFT, 21}, {38, SHIFT, 30}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 67}, {10, SHIFT, 34}, },
			{{-1, ERROR, 21}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, ERROR, 22}, {12, SHIFT, 49}, },
			{{-1, ERROR, 23}, {18, SHIFT, 50}, },
			{{-1, ERROR, 24}, {19, SHIFT, 51}, },
			{{-1, REDUCE, 12}, {20, SHIFT, 52}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 7}, {18, SHIFT, 50}, {20, SHIFT, 53}, },
			{{-1, ERROR, 31}, {19, SHIFT, 54}, },
			{{-1, ERROR, 32}, {19, SHIFT, 55}, },
			{{-1, REDUCE, 9}, {20, SHIFT, 56}, },
			{{-1, ERROR, 34}, {0, SHIFT, 13}, {1, SHIFT, 14}, {2, SHIFT, 15}, },
			{{-1, ERROR, 35}, {13, SHIFT, 58}, },
			{{-1, ERROR, 36}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, ERROR, 37}, {9, SHIFT, 3}, {12, SHIFT, 36}, {14, SHIFT, 37}, {15, SHIFT, 60}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, ERROR, 38}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 42}, {12, SHIFT, 66}, },
			{{-1, ERROR, 43}, {17, SHIFT, 67}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, REDUCE, 25}, {21, SHIFT, 73}, {22, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 67}, {10, SHIFT, 34}, },
			{{-1, ERROR, 50}, {12, SHIFT, 36}, {14, SHIFT, 37}, {16, SHIFT, 79}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 80}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 52}, {38, SHIFT, 23}, },
			{{-1, ERROR, 53}, {38, SHIFT, 86}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 56}, {38, SHIFT, 23}, },
			{{-1, ERROR, 57}, {16, SHIFT, 21}, {38, SHIFT, 89}, },
			{{-1, REDUCE, 73}, {3, SHIFT, 90}, {6, SHIFT, 91}, {14, SHIFT, 92}, {38, SHIFT, 93}, },
			{{-1, ERROR, 59}, {13, SHIFT, 99}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 87}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, ERROR, 63}, {9, SHIFT, 3}, {12, SHIFT, 36}, {14, SHIFT, 37}, {15, SHIFT, 100}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, ERROR, 64}, {12, SHIFT, 36}, {14, SHIFT, 37}, {15, SHIFT, 103}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, REDUCE, 28}, {21, SHIFT, 73}, {22, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 80}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 68}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 69}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 70}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 71}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 72}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 73}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 74}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 75}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 76}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 77}, {12, SHIFT, 36}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, },
			{{-1, ERROR, 78}, {13, SHIFT, 117}, },
			{{-1, ERROR, 79}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 118}, },
			{{-1, REDUCE, 55}, {12, SHIFT, 66}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 53}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 7}, {20, SHIFT, 53}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 65}, {20, SHIFT, 121}, },
			{{-1, ERROR, 90}, {12, SHIFT, 122}, },
			{{-1, ERROR, 91}, {12, SHIFT, 123}, },
			{{-1, REDUCE, 73}, {3, SHIFT, 90}, {6, SHIFT, 91}, {9, SHIFT, 3}, {10, SHIFT, 4}, {14, SHIFT, 92}, {38, SHIFT, 93}, },
			{{-1, ERROR, 93}, {12, SHIFT, 66}, {18, SHIFT, 128}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 102}, {12, SHIFT, 36}, {14, SHIFT, 37}, {15, SHIFT, 129}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 88}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, REDUCE, 82}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, ERROR, 106}, {13, SHIFT, 130}, {20, SHIFT, 131}, },
			{{-1, REDUCE, 26}, {21, SHIFT, 73}, {22, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 27}, {21, SHIFT, 73}, {22, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 30}, {21, SHIFT, 73}, {22, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 31}, {21, SHIFT, 73}, {22, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 29}, {21, SHIFT, 73}, {22, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 63}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, ERROR, 118}, {11, SHIFT, 133}, {12, SHIFT, 66}, },
			{{-1, ERROR, 119}, {17, SHIFT, 134}, },
			{{-1, REDUCE, 22}, {20, SHIFT, 135}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, REDUCE, 67}, {10, SHIFT, 34}, },
			{{-1, ERROR, 122}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, ERROR, 123}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 127}, {15, SHIFT, 139}, },
			{{-1, ERROR, 128}, {12, SHIFT, 36}, {14, SHIFT, 37}, {16, SHIFT, 79}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 80}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 130}, {19, SHIFT, 144}, },
			{{-1, ERROR, 131}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, REDUCE, 64}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, ERROR, 133}, {12, SHIFT, 36}, {14, SHIFT, 37}, {16, SHIFT, 146}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 135}, {12, SHIFT, 36}, {14, SHIFT, 37}, {23, SHIFT, 38}, {35, SHIFT, 39}, {36, SHIFT, 40}, {37, SHIFT, 41}, {38, SHIFT, 42}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 137}, {13, SHIFT, 150}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, ERROR, 138}, {13, SHIFT, 151}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 140}, {19, SHIFT, 152}, },
			{{-1, ERROR, 141}, {19, SHIFT, 153}, },
			{{-1, ERROR, 142}, {19, SHIFT, 154}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, ERROR, 143}, {19, SHIFT, 155}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 81}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, ERROR, 146}, {38, SHIFT, 156}, },
			{{-1, ERROR, 147}, {17, SHIFT, 157}, },
			{{-1, ERROR, 148}, {17, SHIFT, 158}, {24, SHIFT, 68}, {25, SHIFT, 69}, {29, SHIFT, 70}, {30, SHIFT, 71}, {31, SHIFT, 72}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 73}, {3, SHIFT, 90}, {6, SHIFT, 91}, {14, SHIFT, 92}, {38, SHIFT, 93}, },
			{{-1, REDUCE, 73}, {3, SHIFT, 90}, {6, SHIFT, 91}, {14, SHIFT, 92}, {38, SHIFT, 93}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 156}, {11, SHIFT, 133}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 159}, {5, SHIFT, 161}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 73}, {3, SHIFT, 90}, {6, SHIFT, 91}, {14, SHIFT, 92}, {38, SHIFT, 93}, },
			{{-1, REDUCE, 77}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 5}, },
			{{-1, 6}, {11, 19}, },
			{{-1, 7}, {92, 124}, },
			{{-1, 31}, {53, 87}, },
			{{-1, 32}, {56, 88}, },
			{{-1, 8}, {37, 61}, {63, 101}, {92, 125}, },
			{{-1, 24}, {52, 85}, },
			{{-1, 16}, {3, 17}, {4, 18}, {34, 57}, },
			{{-1, -1}, },
			{{-1, 81}, {128, 140}, },
			{{-1, 119}, {135, 149}, },
			{{-1, 82}, {128, 141}, {133, 147}, },
			{{-1, 62}, {21, 43}, {36, 59}, {50, 83}, {64, 104}, {66, 105}, {79, 120}, {102, 104}, {122, 137}, {123, 138}, {128, 142}, {131, 145}, {132, 104}, {133, 148}, {135, 120}, },
			{{-1, 44}, {38, 65}, {68, 107}, {69, 108}, {70, 109}, {71, 110}, {72, 111}, },
			{{-1, 45}, {73, 112}, {74, 113}, {75, 114}, {76, 115}, {77, 116}, },
			{{-1, 46}, },
			{{-1, 47}, },
			{{-1, 25}, {18, 33}, {56, 33}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 84}, {128, 143}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 94}, },
			{{-1, 9}, },
			{{-1, 10}, },
			{{-1, 35}, {49, 78}, {121, 136}, },
			{{-1, 95}, {92, 126}, {150, 159}, {151, 160}, {161, 162}, },
			{{-1, 127}, },
			{{-1, 96}, },
			{{-1, 97}, },
			{{-1, 48}, {58, 98}, {92, 98}, {150, 98}, {151, 98}, {161, 98}, },
			{{-1, 106}, },
			{{-1, 11}, },
			{{-1, 63}, },
			{{-1, 64}, {63, 102}, {117, 132}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'procedure', 'function', 'cons', 'var'",
			"expecting: id",
			"expecting: 'real', 'int', 'bool'",
			"expecting: EOF",
			"expecting: 'procedure', 'function', 'cons', 'var', EOF",
			"expecting: '('",
			"expecting: '[', id",
			"expecting: 'var', ')'",
			"expecting: '(', '{', '!', integer, real number, boolean, id",
			"expecting: ':='",
			"expecting: ';'",
			"expecting: ';', ','",
			"expecting: ':=', ';', ','",
			"expecting: ')'",
			"expecting: 'cons', '(', '{', '}', '!', integer, real number, boolean, id",
			"expecting: '(', integer, real number, boolean",
			"expecting: 'procedure', 'function', 'cons', 'var', '(', ')', '{', '}', ']', ';', ',', 'and', 'or', '!', '+', '-', '/', '*', '%', '>', '<', '=', integer, real number, boolean, id, EOF",
			"expecting: ']', '+', '-', '>', '<', '='",
			"expecting: 'procedure', 'function', 'cons', 'var', '(', ')', '{', '}', ']', ';', ',', '!', '+', '-', '>', '<', '=', integer, real number, boolean, id, EOF",
			"expecting: '(', '{', '[', '!', integer, real number, boolean, id",
			"expecting: 'procedure', 'function', 'cons', 'var', '(', '{', '}', '!', integer, real number, boolean, id, EOF",
			"expecting: 'procedure', 'function', 'cons', 'var', '}', EOF",
			"expecting: 'if', 'while', 'procedure', 'function', 'cons', 'var', '{', id, EOF",
			"expecting: ')', '+', '-', '>', '<', '='",
			"expecting: 'procedure', 'function', 'cons', 'var', '(', '{', '}', '!', '+', '-', '>', '<', '=', integer, real number, boolean, id, EOF",
			"expecting: '(', '{', '}', '!', integer, real number, boolean, id",
			"expecting: '(', ')', '{', ',', '!', integer, real number, boolean, id",
			"expecting: '(', ';', ','",
			"expecting: ';', ',', '+', '-', '>', '<', '='",
			"expecting: ')', ','",
			"expecting: 'if', 'while', 'cons', 'var', '{', '}', id",
			"expecting: '(', ':='",
			"expecting: 'else', 'procedure', 'function', 'cons', 'var', '}', EOF",
			"expecting: ')', ',', '+', '-', '>', '<', '='",
			"expecting: 'procedure', 'function', 'cons', 'var', '(', '{', '!', integer, real number, boolean, id, EOF",
			"expecting: '|', '('",
			"expecting: ']'",
			"expecting: ']', ',', '+', '-', '>', '<', '='",
			"expecting: '}'",
			"expecting: ';', '+', '-', '>', '<', '='",
			"expecting: 'else', 'procedure', 'function', 'cons', 'var', '(', ')', '{', '}', ']', ';', ',', '!', '+', '-', '>', '<', '=', integer, real number, boolean, id, EOF",
			"expecting: 'if', 'else', 'while', '{', id",
			"expecting: 'if', 'else', 'while', 'procedure', 'function', 'cons', 'var', '{', '}', id, EOF",
			"expecting: '|'",
			"expecting: ']', ';', ','",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 4, 7, 8, 5, 9, 10, 11, 11, 11, 11, 11, 12, 10, 10, 11, 2, 13, 8, 14, 15, 16, 16, 16, 5, 17, 16, 16, 18, 16, 18, 7, 19, 20, 1, 1, 21, 21, 1, 6, 22, 23, 18, 14, 24, 14, 25, 16, 26, 6, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13, 8, 27, 11, 11, 28, 11, 10, 11, 10, 10, 29, 5, 5, 30, 31, 32, 4, 32, 32, 32, 16, 18, 14, 25, 18, 24, 33, 29, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 34, 35, 36, 37, 7, 8, 8, 38, 38, 38, 38, 19, 18, 10, 8, 34, 19, 11, 8, 13, 23, 23, 32, 10, 10, 39, 10, 40, 33, 1, 36, 17, 36, 41, 42, 32, 32, 32, 32, 43, 44, 44, 45, 32, 42, 32, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
